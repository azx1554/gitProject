package Xi.DesignPattern.Bridge;

/**
 * Created by Xi on 2018/4/16.
 */

/**
 *   桥接模式是一种很实用的结构型设计模式，如果软件系统中某个类存在两个独立变化的维度，
 *   通过该模式可以将这两个维度分离出来，使两者可以独立扩展，让系统更加符合“单一职责原则”。
 */

/**
 *   Sunny软件公司欲开发一个跨平台图像浏览系统，要求该系统能够显示BMP、JPG、GIF、PNG等多种格式的文件，
 *   并且能够在Windows、Linux、Unix等多个操作系统上运行。系统首先将各种格式的文件解析为像素矩阵(Matrix)，
 *   然后将像素矩阵显示在屏幕上，在不同的操作系统中可以调用不同的绘制函数来绘制像素矩阵。
 *   系统需具有较好的扩展性以支持新的文件格式和操作系统。
 */

/**
 *  在使用桥接模式时，我们首先应该识别出一个类所具有的两个独立变化的维度，将它们设计为两个独立的继承等级结构，
 *  为两个维度都提供抽象层，并建立抽象耦合。通常情况下，我们将具有两个独立变化维度的类的一些普通业务方法和与
 *  之关系最密切的维度设计为“抽象类”层次结构（抽象部分），而将另一个维度设计为“实现类”层次结构（实现部分）。
 *  在上例中，图片的格式和操作系统即为两个独立变化的维度。实际中jdbc的驱动程序就是以此模式设计的。
 */

/**
 * 在以下情况下可以考虑使用桥接模式：

 (1)如果一个系统需要在抽象化和具体化之间增加更多的灵活性，避免在两个层次之间建立静态的继承关系，通过桥接模式
 可以使它们在抽象层建立一个关联关系。

 (2)“抽象部分”和“实现部分”可以以继承的方式独立扩展而互不影响，在程序运行时可以动态将一个抽象化子类的对象
 和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合。

 (3)一个类存在两个（或多个）独立变化的维度，且这两个（或多个）维度都需要独立进行扩展。

 (4)对于那些不希望使用继承或因为多层继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。
 */
public class BridgeTest{

    public static void main(String[] args) {
        Image image = new JPGImage();
        OSInterface osInterface = new WindowsOS();
        image.setImageImp(osInterface);
        image.parseFile("shadow fiend");
    }
}
